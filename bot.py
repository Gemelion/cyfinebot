
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
import logging
from dotenv import load_dotenv
import os

load_dotenv()

API_TOKEN = os.getenv('BOT_TOKEN')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# Stage 1 - Greeting and description
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    agree_button = KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")
    disagree_button = KeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω")
    markup.add(agree_button, disagree_button)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CyFineBot ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤ —Å –∫–∞–º–µ—Ä –Ω–∞ –ö–∏–ø—Ä–µ.
"
        "üìç–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:
"
        "‚Äî –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º –≤–∞—à–µ–≥–æ ARC/ID (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞) –∏ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
"
        "‚Äî –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —à—Ç—Ä–∞—Ñ—ã –Ω–∞ —Å–∞–π—Ç–µ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å.
"
        "‚Äî –ù–µ —Å–æ–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º GDPR.
"
        "üõ°Ô∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
"
        "‚ùó–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.
"
        "–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=markup)

# Stage 2 - User consent (GDPR)
@dp.message_handler(lambda message: message.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")
async def user_agreement(message: types.Message):
    # Here, we would store user's consent in a database
    await message.answer("–í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤.")
    # Redirect to the next stage (document input)
    await choose_document_type(message)

@dp.message_handler(lambda message: message.text == "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω")
async def no_agreement(message: types.Message):
    await message.answer("–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.")
    await message.answer("–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥.")
    await message.bot.close()

# Stage 3 - Request for document type and number
async def choose_document_type(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    document_buttons = [
        KeyboardButton("ARC Number"),
        KeyboardButton("Alien Book"),
        KeyboardButton("Passport"),
        KeyboardButton("Identity Card"),
        KeyboardButton("Cyprus Residence Permit")
    ]
    markup.add(*document_buttons)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞.", reply_markup=markup)

# Start bot
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
