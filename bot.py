
import logging
import sqlite3
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from encryption import encrypt, decrypt
from fines import check_fines
import os
import asyncio
import sys

BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = "db.sqlite3"

ID_NUMBER, CAR_NUMBER = range(2)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            encrypted_id TEXT,
            encrypted_car TEXT,
            consent_given INTEGER,
            had_fines INTEGER DEFAULT 0
        )""")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —à—Ç—Ä–∞—Ñ—ã —Å –∫–∞–º–µ—Ä –Ω–∞ –ö–∏–ø—Ä–µ.\n\n"
        "üîê –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–≥–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å GDPR.\n\n"
        "–ù–∞–∂–º–∏ /consent, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ù–∞–∂–º–∏ /delete, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ."
    )

async def consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("INSERT OR REPLACE INTO users (user_id, consent_given) VALUES (?, 1)", (user_id,))
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /register, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.")

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü™™ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏:")
    return ID_NUMBER

async def id_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['id_number'] = update.message.text.strip()
    await update.message.reply_text("üöó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    return CAR_NUMBER

async def car_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    car = update.message.text.strip()
    id_number = context.user_data['id_number']

    encrypted_id = encrypt(id_number)
    encrypted_car = encrypt(car)

    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("UPDATE users SET encrypted_id=?, encrypted_car=? WHERE user_id=?",
                     (encrypted_id, encrypted_car, user_id))

    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT encrypted_id, encrypted_car FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if not row:
            await update.message.reply_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register.")
            return
        decrypted_id = decrypt(row[0])
        decrypted_car = decrypt(row[1])

    fines = check_fines(decrypted_id, decrypted_car)
    if fines:
        await update.message.reply_text(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(fines)} —à—Ç—Ä–∞—Ñ–æ–≤! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
    else:
        await update.message.reply_text("‚úÖ –®—Ç—Ä–∞—Ñ–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("DELETE FROM users WHERE user_id=?", (user_id,))
    await update.message.reply_text("üóëÔ∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")

async def daily_check(app):
    while True:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id, encrypted_id, encrypted_car, had_fines FROM users WHERE consent_given=1")
            rows = cursor.fetchall()

        for user_id, encrypted_id, encrypted_car, had_fines in rows:
            id_number = decrypt(encrypted_id)
            car_number = decrypt(encrypted_car)

            fines = check_fines(id_number, car_number)
            has_now = 1 if fines else 0

            if has_now and not had_fines:
                try:
                    await app.bot.send_message(
                        chat_id=user_id,
                        text="üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —à—Ç—Ä–∞—Ñ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://cycamerasystem.com.cy/Login –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            with sqlite3.connect(DB_PATH) as conn:
                conn.execute("UPDATE users SET had_fines=? WHERE user_id=?", (has_now, user_id))

        await asyncio.sleep(86400)

if __name__ == '__main__':
    if os.environ.get("BOT_RUNNING") == "1":
        logger.error("‚ùå –£–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        sys.exit(1)

    os.environ["BOT_RUNNING"] = "1"
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("register", register)],
        states={
            ID_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, id_number)],
            CAR_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, car_number)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("consent", consent))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("check", check))
    app.add_handler(CommandHandler("delete", delete))

    app.job_queue.run_once(lambda ctx: asyncio.create_task(daily_check(app)), when=5)
    app.run_polling()
